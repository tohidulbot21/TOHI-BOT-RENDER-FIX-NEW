
module.exports.config = {
    name: "prefix",
    version: "2.0.1",
    hasPermssion: 0,
    usePrefix: false, // Can be called without prefix
    credits: "TOHI-BOT-HUB",
    description: "Display current prefix and manage global/group prefixes",
    commandCategory: "config",
    usages: "[global|group|reset]",
    cooldowns: 3,
};

module.exports.languages = {
    "vi": {
        "currentPrefix": "Prefix hiс╗Зn tс║бi cс╗зa nh├│m n├аy l├а: %1",
        "globalPrefix": "Prefix to├аn cс║зu: %1",
        "groupPrefix": "Prefix nh├│m: %1",
        "noGroupPrefix": "Nh├│m n├аy ─Сang sс╗н dс╗еng prefix to├аn cс║зu",
        "adminOnly": "Chс╗Й admin bot mс╗Ыi c├│ thс╗Г thay ─Сс╗Хi prefix",
        "usage": "Sс╗н dс╗еng: prefix [global|group|reset]"
    },
    "en": {
        "currentPrefix": "Current prefix for this group is: %1",
        "globalPrefix": "Global prefix: %1",
        "groupPrefix": "Group prefix: %1",
        "noGroupPrefix": "This group is using global prefix",
        "adminOnly": "Only bot admin can change prefix",
        "usage": "Usage: prefix [global|group|reset]"
    },
    "bd": {
        "currentPrefix": "ржПржЗ ржЧрзНрж░рзБржкрзЗрж░ ржмрж░рзНрждржорж╛ржи ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕: %1",
        "globalPrefix": "ржЧрзНрж▓рзЛржмрж╛рж▓ ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕: %1",
        "groupPrefix": "ржЧрзНрж░рзБржк ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕: %1",
        "noGroupPrefix": "ржПржЗ ржЧрзНрж░рзБржк ржЧрзНрж▓рзЛржмрж╛рж▓ ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржЫрзЗ",
        "adminOnly": "рж╢рзБржзрзБржорж╛рждрзНрж░ bot admin prefix ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржкрж╛рж░рзЗ",
        "usage": "ржмрзНржпржмрж╣рж╛рж░: prefix [global|group|reset]"
    }
};

module.exports.run = async ({ api, event, args, Threads, getText }) => {
    const { threadID, messageID, senderID } = event;
    
    // Fallback function for language errors
    const getTextSafe = (key, ...params) => {
        try {
            return getText(key, ...params);
        } catch (error) {
            console.log(`Language key error: ${key}`);
            switch(key) {
                case "currentPrefix":
                    return `ржПржЗ ржЧрзНрж░рзБржкрзЗрж░ ржмрж░рзНрждржорж╛ржи ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕: ${params[0]}`;
                case "globalPrefix":
                    return `ржЧрзНрж▓рзЛржмрж╛рж▓ ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕: ${params[0]}`;
                case "groupPrefix":
                    return `ржЧрзНрж░рзБржк ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕: ${params[0]}`;
                case "noGroupPrefix":
                    return "ржПржЗ ржЧрзНрж░рзБржк ржЧрзНрж▓рзЛржмрж╛рж▓ ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржЫрзЗ";
                case "adminOnly":
                    return "рж╢рзБржзрзБржорж╛рждрзНрж░ bot admin prefix ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржкрж╛рж░рзЗ";
                case "usage":
                    return "ржмрзНржпржмрж╣рж╛рж░: prefix [global|group|reset]";
                default:
                    return "Language error occurred";
            }
        }
    };

    try {
        // Get global prefix
        const globalPrefix = global.config.PREFIX;
        
        // Get group data and current prefix
        const threadData = (await Threads.getData(threadID)).data || {};
        const currentGroupPrefix = threadData.PREFIX;
        const activePrefix = currentGroupPrefix || globalPrefix;

        // If no arguments, show current prefix info
        if (!args[0]) {
            let prefixInfo = `тХнтФАтФАтФАтФАтФАтЬи ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕ рждржерзНржп тЬитФАтФАтФАтФАтФАтХо\n`;
            prefixInfo += `тФВ  ЁЯМР ржЧрзНрж▓рзЛржмрж╛рж▓ ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕: "${globalPrefix}"\n`;
            
            if (currentGroupPrefix && currentGroupPrefix !== globalPrefix) {
                prefixInfo += `тФВ  ЁЯПа ржЧрзНрж░рзБржк ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕: "${currentGroupPrefix}"\n`;
                prefixInfo += `тФВ  тЬЕ ржмрж░рзНрждржорж╛ржи ржмрзНржпржмрж╣рзГржд: "${activePrefix}"\n`;
            } else {
                prefixInfo += `тФВ  ЁЯПа ржЧрзНрж░рзБржк ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕: рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗ\n`;
                prefixInfo += `тФВ  тЬЕ ржмрж░рзНрждржорж╛ржи ржмрзНржпржмрж╣рзГржд: "${activePrefix}" (ржЧрзНрж▓рзЛржмрж╛рж▓)\n`;
            }
            
            prefixInfo += `тФВ\n`;
            prefixInfo += `тФВ  ЁЯУЭ ржХржорж╛ржирзНржб ржЕржкрж╢ржи:\n`;
            prefixInfo += `тФВ  тАв prefix global - ржЧрзНрж▓рзЛржмрж╛рж▓ рждржерзНржп ржжрзЗржЦрзБржи\n`;
            prefixInfo += `тФВ  тАв prefix group - ржЧрзНрж░рзБржк ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕ ржорзНржпрж╛ржирзЗржЬ ржХрж░рзБржи\n`;
            prefixInfo += `тФВ  тАв prefix reset - ржЧрзНрж░рзБржк ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕ рж░рж┐рж╕рзЗржЯ ржХрж░рзБржи\n`;
            prefixInfo += `тХ░тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтХп\n\n`;
            prefixInfo += `ЁЯТб ржЙржжрж╛рж╣рж░ржг: "${activePrefix}help" - help command ржЪрж╛рж▓рж╛ржи`;
            
            return api.sendMessage(prefixInfo, threadID, messageID);
        }

        const option = args[0].toLowerCase();

        switch(option) {
            case "global":
                let globalInfo = `тХнтФАтФАтФАтФАтФАЁЯМР ржЧрзНрж▓рзЛржмрж╛рж▓ ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕ ржЗржиржлрзЛ ЁЯМРтФАтФАтФАтФАтФАтХо\n`;
                globalInfo += `тФВ  ЁЯФ╕ ржЧрзНрж▓рзЛржмрж╛рж▓ ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕: "${globalPrefix}"\n`;
                globalInfo += `тФВ  ЁЯФ╕ рж╕ржм ржЧрзНрж░рзБржкрзЗ ржбрж┐ржлрж▓рзНржЯ рж╣рж┐рж╕рзЗржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ\n`;
                globalInfo += `тФВ  ЁЯФ╕ config.json ржП рж╕рзЗржЯ ржХрж░рж╛ ржЖржЫрзЗ\n`;
                globalInfo += `тФВ  ЁЯФ╕ рж╕ржм command ржПрж░ рж╕рж╛ржерзЗ ржХрж╛ржЬ ржХрж░рзЗ\n`;
                globalInfo += `тХ░тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтХп\n\n`;
                globalInfo += `ЁЯТб ржЙржжрж╛рж╣рж░ржг: "${globalPrefix}help", "${globalPrefix}ai hello"`;
                
                return api.sendMessage(globalInfo, threadID, messageID);

            case "group":
                if (!global.config.ADMINBOT.includes(senderID)) {
                    return api.sendMessage("тЭМ " + getTextSafe("adminOnly"), threadID, messageID);
                }
                
                let groupInfo = `тХнтФАтФАтФАтФАтФАЁЯПа ржЧрзНрж░рзБржк ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ ЁЯПатФАтФАтФАтФАтФАтХо\n`;
                groupInfo += `тФВ  ЁЯФ╕ ржмрж░рзНрждржорж╛ржи ржЧрзНрж░рзБржк ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕: `;
                
                if (currentGroupPrefix && currentGroupPrefix !== globalPrefix) {
                    groupInfo += `"${currentGroupPrefix}"\n`;
                    groupInfo += `тФВ  ЁЯФ╕ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕: ржХрж╛рж╕рзНржЯржо ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕ рж╕ржХрзНрж░рж┐ржпрж╝\n`;
                } else {
                    groupInfo += `рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗ\n`;
                    groupInfo += `тФВ  ЁЯФ╕ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕: ржЧрзНрж▓рзЛржмрж╛рж▓ ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржЫрзЗ\n`;
                }
                
                groupInfo += `тФВ  ЁЯФ╕ ржЧрзНрж▓рзЛржмрж╛рж▓ ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕: "${globalPrefix}"\n`;
                groupInfo += `тФВ\n`;
                groupInfo += `тФВ  тЪЩя╕П ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ:\n`;
                groupInfo += `тФВ  тАв /setprefix [ржирждрзБржи ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕] - ржирждрзБржи рж╕рзЗржЯ ржХрж░рзБржи\n`;
                groupInfo += `тФВ  тАв prefix reset - ржбрж┐ржлрж▓рзНржЯрзЗ ржлрж┐рж░рж╛ржи\n`;
                groupInfo += `тХ░тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтХп\n\n`;
                groupInfo += `ЁЯТб ржЯрж┐ржк: ржЧрзНрж░рзБржк ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕ рж╢рзБржзрзБ ржПржЗ ржЧрзНрж░рзБржкрзЗржЗ ржХрж╛ржЬ ржХрж░рзЗ`;
                
                return api.sendMessage(groupInfo, threadID, messageID);

            case "reset":
                if (!global.config.ADMINBOT.includes(senderID)) {
                    return api.sendMessage("тЭМ " + getTextSafe("adminOnly"), threadID, messageID);
                }
                
                // Reset group prefix to global
                let data = (await Threads.getData(threadID)).data || {};
                data["PREFIX"] = globalPrefix;
                await Threads.setData(threadID, { data });
                await global.data.threadData.set(String(threadID), data);
                
                let resetMsg = `тЬЕ ржЧрзНрж░рзБржк ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕ рж░рж┐рж╕рзЗржЯ рж╕ржорзНржкржирзНржи!\n\n`;
                resetMsg += `ЁЯФ╕ ржкрзБрж░рж╛рждржи ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕: "${currentGroupPrefix || 'рж╕рзЗржЯ ржХрж░рж╛ ржЫрж┐рж▓ ржирж╛'}"\n`;
                resetMsg += `ЁЯФ╕ ржирждрзБржи ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕: "${globalPrefix}" (ржЧрзНрж▓рзЛржмрж╛рж▓)\n\n`;
                resetMsg += `ЁЯТб ржПржЦржи ржПржЗ ржЧрзНрж░рзБржкрзЗ ржЧрзНрж▓рзЛржмрж╛рж▓ ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕ "${globalPrefix}" ржмрзНржпржмрж╣рж╛рж░ рж╣ржмрзЗ`;
                
                return api.sendMessage(resetMsg, threadID, messageID);

            default:
                return api.sendMessage("тЭМ " + getTextSafe("usage"), threadID, messageID);
        }
        
    } catch (error) {
        console.log("Prefix command error:", error);
        return api.sendMessage("тЭМ ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕ рждржерзНржп рж▓рзЛржб ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред", threadID, messageID);
    }
};
