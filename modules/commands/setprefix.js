
module.exports.config = {
	name: "setprefix",
	version: "0.0.3",
	permission: 2,
	usePrefix: true,
	credits: "TOHI-BOT-HUB",
	description: "Change prefix for specific group with confirmation",
	commandCategory: "admin",
	usages: "setprefix [new_prefix]",
	cooldowns: 5,
};

module.exports.languages = {
	"vi": {
		"successChange": "ƒê√£ chuy·ªÉn ƒë·ªïi prefix c·ªßa nh√≥m th√†nh: %1",
		"missingInput": "Ph·∫ßn prefix c·∫ßn ƒë·∫∑t kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
		"resetPrefix": "ƒê√£ reset prefix v·ªÅ m·∫∑c ƒë·ªãnh: %1",
		"confirmChange": "B·∫°n c√≥ ch·∫Øc b·∫°n mu·ªën ƒë·ªïi prefix c·ªßa nh√≥m th√†nh: %1 \nReact ho·∫∑c reply ‡¶è‡¶á message ‡¶è confirm ‡¶ï‡¶∞‡¶§‡ßá"
	},
	"en": {
		"successChange": "Changed prefix into: %1",
		"missingInput": "Prefix have not to be blank",
		"resetPrefix": "Reset prefix to: %1",
		"confirmChange": "Are you sure that you want to change prefix into: %1\nReact or reply to this message to confirm"
	},
	"bd": {
		"successChange": "‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: %1",
		"missingInput": "‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ",
		"resetPrefix": "‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: %1",
		"confirmChange": "‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶Ø‡ßá ‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®: %1\n‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶á ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶ï‡ßç‡¶ü ‡¶¨‡¶æ ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®"
	}
}

// Handle reaction confirmation
module.exports.handleReaction = async function({ api, event, Threads, handleReaction, getText }) {
	try {
		if (event.userID != handleReaction.author) return;
		
		// Check bot admin permission
		if (!global.config.ADMINBOT.includes(event.userID)) {
			return api.sendMessage("‚ùå ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ bot admin ‡¶è‡¶á command ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§", event.threadID);
		}

		const { threadID, messageID } = event;
		
		// Set the new prefix for this specific group
		var data = (await Threads.getData(String(threadID))).data || {};
		data["PREFIX"] = handleReaction.PREFIX;
		await Threads.setData(threadID, { data });
		await global.data.threadData.set(String(threadID), data);
		
		// Remove the confirmation message
		api.unsendMessage(handleReaction.messageID);
		
		// Success message
		let successMessage;
		try {
			successMessage = getText("successChange", handleReaction.PREFIX);
		} catch (langError) {
			successMessage = `‚úÖ ‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: ${handleReaction.PREFIX}\n\nüî∏ ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶è‡¶ñ‡¶® ‡¶∏‡¶¨ command ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø "${handleReaction.PREFIX}" prefix ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®\nüî∏ Global config prefix "${global.config.PREFIX}" ‡¶è‡¶∞ ‡¶™‡¶æ‡¶∂‡¶æ‡¶™‡¶æ‡¶∂‡¶ø ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø "${handleReaction.PREFIX}" ‡¶ì ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá`;
		}
		
		return api.sendMessage(successMessage, threadID, messageID);
	} catch (e) { 
		console.log("SetPrefix handleReaction error:", e);
		return api.sendMessage("‚ùå ‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", event.threadID);
	}
}

// Handle reply confirmation
module.exports.handleReply = async function({ api, event, Threads, handleReply, getText }) {
	try {
		if (event.senderID != handleReply.author) return;
		
		// Check bot admin permission
		if (!global.config.ADMINBOT.includes(event.senderID)) {
			return api.sendMessage("‚ùå ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ bot admin ‡¶è‡¶á command ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§", event.threadID);
		}

		const { threadID, messageID } = event;
		
		// Set the new prefix for this specific group
		var data = (await Threads.getData(String(threadID))).data || {};
		data["PREFIX"] = handleReply.PREFIX;
		await Threads.setData(threadID, { data });
		await global.data.threadData.set(String(threadID), data);
		
		// Remove the confirmation message
		api.unsendMessage(handleReply.messageID);
		
		// Success message
		let successMessage;
		try {
			successMessage = getText("successChange", handleReply.PREFIX);
		} catch (langError) {
			successMessage = `‚úÖ ‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: ${handleReply.PREFIX}\n\nüî∏ ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶è‡¶ñ‡¶® ‡¶∏‡¶¨ command ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø "${handleReply.PREFIX}" prefix ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®\nüî∏ Global config prefix "${global.config.PREFIX}" ‡¶è‡¶∞ ‡¶™‡¶æ‡¶∂‡¶æ‡¶™‡¶æ‡¶∂‡¶ø ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø "${handleReply.PREFIX}" ‡¶ì ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá`;
		}
		
		return api.sendMessage(successMessage, threadID, messageID);
	} catch (e) { 
		console.log("SetPrefix handleReply error:", e);
		return api.sendMessage("‚ùå ‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", event.threadID);
	}
}

module.exports.run = async ({ api, event, args, Threads, getText }) => {
	// Check if user is bot admin
	if (!global.config.ADMINBOT.includes(event.senderID)) {
		return api.sendMessage("‚ùå ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ bot admin ‡¶è‡¶á command ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§", event.threadID, event.messageID);
	}

	// Fallback function for language errors
	const getTextSafe = (key, ...params) => {
		try {
			return getText(key, ...params);
		} catch (error) {
			console.log(`Language key error: ${key}`);
			switch(key) {
				case "missingInput":
					return "‚ùå ‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ";
				case "resetPrefix":
					return `‚úÖ ‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: ${params[0]}\n\nüî∏ ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ global prefix "${params[0]}" ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡¶¨‡ßá`;
				case "confirmChange":
					return `üîÑ ‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡ßá‡¶∞ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§‡¶ï‡¶∞‡¶£:\n\nüî∏ ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßç‡¶∏: "${params[0]}"\nüî∏ ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶¨ command ‡¶è ‡¶è‡¶á prefix ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá\nüî∏ Global config prefix "${global.config.PREFIX}" ‡¶è‡¶∞ ‡¶™‡¶æ‡¶∂‡¶æ‡¶™‡¶æ‡¶∂‡¶ø "${params[0]}" ‡¶ì ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá\n\n‚úÖ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶á ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®`;
				default:
					return "Language error occurred";
			}
		}
	};

	// Check if prefix is provided
	if (typeof args[0] == "undefined") {
		return api.sendMessage(getTextSafe("missingInput"), event.threadID, event.messageID);
	}
	
	let prefix = args[0].trim();
	if (!prefix) {
		return api.sendMessage(getTextSafe("missingInput"), event.threadID, event.messageID);
	}
	
	// Handle reset command
	if (prefix == "reset") {
		var data = (await Threads.getData(event.threadID)).data || {};
		data["PREFIX"] = global.config.PREFIX;
		await Threads.setData(event.threadID, { data });
		await global.data.threadData.set(String(event.threadID), data);
		return api.sendMessage(getTextSafe("resetPrefix", global.config.PREFIX), event.threadID, event.messageID);
	} else {
		// Send confirmation message that supports both reaction and reply
		return api.sendMessage(getTextSafe("confirmChange", prefix), event.threadID, (error, info) => {
			if (error) {
				console.log("SetPrefix confirmation setup error:", error);
				return api.sendMessage("‚ùå ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ‡ßá‡¶∂‡¶® ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", event.threadID, event.messageID);
			}
			
			// Add to both reaction and reply handlers
			global.client.handleReaction.push({
				name: "setprefix",
				messageID: info.messageID,
				author: event.senderID,
				PREFIX: prefix
			});
			
			global.client.handleReply.push({
				name: "setprefix",
				messageID: info.messageID,
				author: event.senderID,
				PREFIX: prefix
			});
		});
	}
}
